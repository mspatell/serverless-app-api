service: serverless-notes-app-api-prod

provider:
  name: aws
  runtime: nodejs14.x
  stage: prod
  region: us-east-1
  environment:
    DYNAMODB_TABLE_NAME: ${self:custom.notesTableName}

custom:
  notesTableName: notes-table-${self:provider.stage}

plugins:
  - serverless-iam-roles-per-function

functions:
  getNote:
    handler: api.getNote
    name: get-note-prod
    memorySize: 128 # mb
    timeout: 10 # seconds
    events:
      - http:
          path: note/{noteId}
          method: GET
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:GetItem"
        Resource: !GetAtt NotesTable.Arn
  createNote:
    handler: api.createNote
    name: create-note-prod
    memorySize: 128 # mb
    timeout: 10 # seconds
    events:
      - http:
          path: note
          method: POST
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:GetItem"
          - "dynamodb:PutItem"
        Resource: !GetAtt NotesTable.Arn
  updateNote:
    handler: api.updateNote
    name: update-note-prod
    memorySize: 128 # mb
    timeout: 5 # seconds
    events:
      - http:
          path: note/{noteId}
          method: PUT
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:GetItem"
          - "dynamodb:UpdateItem"
        Resource: !GetAtt NotesTable.Arn
  deleteNote:
    handler: api.deleteNote
    name: delete-note-prod
    memorySize: 128 # mb
    timeout: 5 # seconds
    events:
      - http:
          path: note/{noteId}
          method: DELETE
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:GetItem"
          - "dynamodb:DeleteItem"
        Resource: !GetAtt NotesTable.Arn
  getAllNotes:
    handler: api.getAllNotes
    name: get-all-notes-prod
    memorySize: 128 # mb
    timeout: 5 # seconds
    events:
      - http:
          path: notes
          method: GET
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:GetItem"
          - "dynamodb:Scan"
        Resource: !GetAtt NotesTable.Arn

resources:
  Resources:
    NotesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.notesTableName}
        AttributeDefinitions:
          - AttributeName: noteId
            AttributeType: S
        KeySchema:
          - AttributeName: noteId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
